#!/bin/bash

# Load environment variables from .env and .env.local (with priority to .env.local)
if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
fi
if [ -f .env.local ]; then
  export $(grep -v '^#' .env.local | xargs)
fi

# Get the diff of staged changes
DIFF=$(git diff --staged)

if [ -z "$DIFF" ]; then
  echo "No staged changes. Skipping commit message generation."
  exit 0
fi

# Base64 encode the diff
BASE64_DIFF=$(echo -n "$DIFF" | base64)

# Prepare the prompt for Gemini API
PROMPT="Write a concise commit message (30-50 words) based on the following git diff (Base64 encoded):\n\n$BASE64_DIFF"

# Check Gemini API key
if [ -z "$GEMINI_API_KEY" ]; then
    echo "Error: GEMINI_API_KEY environment variable is not set."
    exit 1
fi

GEMINI_API_ENDPOINT="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY"

# Use jq to safely construct the JSON payload
JSON_PAYLOAD=$(jq -n \
  --arg prompt "$PROMPT" \
  '{
    "contents": [{
      "parts": [{"text": $prompt}]
    }],
    "generationConfig": {
      "temperature": 0.3,
      "maxOutputTokens": 150
    }
  }')

# Make the API request
API_RESPONSE=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "$JSON_PAYLOAD" \
  "$GEMINI_API_ENDPOINT")

if [ $? -ne 0 ]; then
    echo "Error: curl command failed. Check your network connection and API endpoint."
    exit 1
fi

# Use Python to parse the JSON and extract the commit message
COMMIT_MESSAGE=$(python3 -c '
import sys, json
data = json.load(sys.stdin)
commit = data["candidates"][0]["content"]["parts"][0]["text"].strip()
print(commit)
' <<< "$API_RESPONSE")

if [ -z "$COMMIT_MESSAGE" ]; then
    echo "Error: Failed to generate commit message from API response. Raw response:"
    echo "$API_RESPONSE"
    exit 1
fi

# Display the generated commit message
echo "Generated commit message:"
echo "$COMMIT_MESSAGE"
echo ""

# Use the generated commit message in the commit, bypassing the hook
git commit --no-verify -m "$COMMIT_MESSAGE"

echo "Commit complete."
